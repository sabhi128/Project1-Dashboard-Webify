import React, { useEffect, useState } from 'react'
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  ArcElement,
  Title,
  Tooltip,
  Legend,
  Filler
} from 'chart.js'
import { Line, Pie } from 'react-chartjs-2'
import RightSidebar from './RightSidebar'
import * as XLSX from 'xlsx'

// Register Chart.js components
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  ArcElement,
  Title,
  Tooltip,
  Legend,
  Filler
)

const Distributions = ({ onNavigate }) => {
  const [animateCharts, setAnimateCharts] = useState(false)
  const [selectedPeriod, setSelectedPeriod] = useState('quarterly')
  const [selectedFilters, setSelectedFilters] = useState({
    ytd: 'YTD',
    type: 'All',
    status: 'All'
  })
  const [openDropdown, setOpenDropdown] = useState(null)
  const [toast, setToast] = useState({ show: false, message: '', type: 'success' })
  const [tableHistory, setTableHistory] = useState([])
  const [historyIndex, setHistoryIndex] = useState(-1)
  const [showFiltersPanel, setShowFiltersPanel] = useState(false)
  const [showRecurringPanel, setShowRecurringPanel] = useState(false)
  const [recurringConfig, setRecurringConfig] = useState({
    frequency: 'Monthly',
    day: '31',
    type: 'Cash',
    amount: '1000'
  })

  // Trigger animations after component mounts
  useEffect(() => {
    const timer = setTimeout(() => {
      setAnimateCharts(true)
    }, 100)
    return () => clearTimeout(timer)
  }, [])

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (openDropdown && !event.target.closest('.relative')) {
        setOpenDropdown(null)
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => document.removeEventListener('mousedown', handleClickOutside)
  }, [openDropdown])

  // Handle period selection
  const handlePeriodChange = (period) => {
    setSelectedPeriod(period)
  }

  // Handle navigation
  const handleNavigate = (view) => {
    if (onNavigate) {
      onNavigate(view)
    }
  }

  // Handle dropdown toggle
  const toggleDropdown = (dropdownName) => {
    setOpenDropdown(openDropdown === dropdownName ? null : dropdownName)
  }

  // Handle filter selection
  const handleFilterChange = (filterType, value) => {
    setSelectedFilters(prev => ({ ...prev, [filterType]: value }))
    setOpenDropdown(null)
  }

  // Handle Excel download for Statement
  const handleDownloadStatement = (rowData) => {
    // Create workbook and worksheet
    const wb = XLSX.utils.book_new()
    
    // Prepare data for Excel
    const excelData = [
      ['Distribution Statement'],
      [''],
      ['Date', 'Amount', 'Type', 'Status'],
      [rowData.date, rowData.amount, rowData.type, rowData.status],
      [''],
      ['Generated on:', new Date().toLocaleDateString()],
      ['Generated by:', 'Shad\'s Dashboard']
    ]
    
    // Create worksheet
    const ws = XLSX.utils.aoa_to_sheet(excelData)
    
    // Set column widths
    ws['!cols'] = [
      { wch: 15 }, // Date
      { wch: 12 }, // Amount
      { wch: 12 }, // Type
      { wch: 12 }  // Status
    ]
    
    // Add worksheet to workbook
    XLSX.utils.book_append_sheet(wb, ws, 'Statement')
    
    // Generate filename
    const fileName = `Distribution_Statement_${rowData.date.replace(/[^a-zA-Z0-9]/g, '_')}.xlsx`
    
    // Download file
    XLSX.writeFile(wb, fileName)
    
    // Show success toast
    setToast({ show: true, message: 'Statement downloaded successfully!', type: 'success' })
    setTimeout(() => setToast({ show: false, message: '', type: 'success' }), 3000)
  }

  // Handle Mark as Paid
  const handleMarkAsPaid = (index) => {
    // Save current state to history before making changes
    const currentState = [...tableData]
    setTableHistory(prev => [...prev.slice(0, historyIndex + 1), currentState])
    setHistoryIndex(prev => prev + 1)
    
    // Update the status from 'Scheduled' to 'Paid'
    setTableData(prevData => {
      const updatedData = [...prevData]
      updatedData[index] = { ...updatedData[index], status: 'Paid' }
      return updatedData
    })
    
    // Show success toast
    setToast({ show: true, message: 'Status updated to Paid successfully!', type: 'success' })
    setTimeout(() => setToast({ show: false, message: '', type: 'success' }), 3000)
    
    // In a real app, you would make an API call here
    console.log(`Marked row ${index} as paid`)
  }

  // Handle Undo
  const handleUndo = () => {
    if (historyIndex > 0) {
      setHistoryIndex(prev => prev - 1)
      setTableData(tableHistory[historyIndex - 1])
      setToast({ show: true, message: 'Action undone successfully!', type: 'success' })
      setTimeout(() => setToast({ show: false, message: '', type: 'success' }), 3000)
    } else {
      setToast({ show: true, message: 'Nothing to undo!', type: 'error' })
      setTimeout(() => setToast({ show: false, message: '', type: 'error' }), 3000)
    }
  }

  // Handle Redo
  const handleRedo = () => {
    if (historyIndex < tableHistory.length - 1) {
      setHistoryIndex(prev => prev + 1)
      setTableData(tableHistory[historyIndex + 1])
      setToast({ show: true, message: 'Action redone successfully!', type: 'success' })
      setTimeout(() => setToast({ show: false, message: '', type: 'success' }), 3000)
    } else {
      setToast({ show: true, message: 'Nothing to redo!', type: 'error' })
      setTimeout(() => setToast({ show: false, message: '', type: 'error' }), 3000)
    }
  }

  // Handle CSV Export
  const handleCSVExport = () => {
    // Create CSV content
    const csvHeaders = ['Date', 'Amount', 'Type', 'Status']
    const csvData = tableData.map(row => [row.date, row.amount, row.type, row.status])
    
    // Combine headers and data
    const csvContent = [csvHeaders, ...csvData]
      .map(row => row.map(cell => `"${cell}"`).join(','))
      .join('\n')
    
    // Create and download CSV file
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' })
    const link = document.createElement('a')
    const url = URL.createObjectURL(blob)
    link.setAttribute('href', url)
    link.setAttribute('download', `Distributions_${new Date().toISOString().split('T')[0]}.csv`)
    link.style.visibility = 'hidden'
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    
    // Show success toast
    setToast({ show: true, message: 'CSV file exported successfully!', type: 'success' })
    setTimeout(() => setToast({ show: false, message: '', type: 'success' }), 3000)
  }

  // Handle ICS Calendar Export
  const handleICSExport = () => {
    // Create ICS content
    const icsContent = [
      'BEGIN:VCALENDAR',
      'VERSION:2.0',
      'PRODID:-//Shad Dashboard//Distributions Calendar//EN',
      'CALSCALE:GREGORIAN',
      'METHOD:PUBLISH',
      ...tableData.map(row => [
        'BEGIN:VEVENT',
        `UID:${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        `DTSTART:${new Date(row.date).toISOString().replace(/[-:]/g, '').split('.')[0]}Z`,
        `DTEND:${new Date(row.date).toISOString().replace(/[-:]/g, '').split('.')[0]}Z`,
        `SUMMARY:Distribution - ${row.type} - ${row.amount}`,
        `DESCRIPTION:Distribution payment of ${row.amount} for ${row.type} (Status: ${row.status})`,
        'END:VEVENT'
      ]).flat(),
      'END:VCALENDAR'
    ].join('\r\n')
    
    // Create and download ICS file
    const blob = new Blob([icsContent], { type: 'text/calendar;charset=utf-8' })
    const link = document.createElement('a')
    const url = URL.createObjectURL(blob)
    link.setAttribute('href', url)
    link.setAttribute('download', `Distributions_Calendar_${new Date().toISOString().split('T')[0]}.ics`)
    link.style.visibility = 'hidden'
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    
    // Show success toast
    setToast({ show: true, message: 'ICS calendar file exported successfully!', type: 'success' })
    setTimeout(() => setToast({ show: false, message: '', type: 'success' }), 3000)
  }

  // Handle Recurring Setup
  const handleRecurringSetup = () => {
    setShowRecurringPanel(!showRecurringPanel)
    if (!showRecurringPanel) {
      setToast({ show: true, message: 'Recurring distribution setup opened!', type: 'success' })
      setTimeout(() => setToast({ show: false, message: '', type: 'success' }), 3000)
    }
  }

  // Handle Generate 12 Months
  const handleGenerate12Months = () => {
    // Generate 12 months of distributions based on the configuration
    const newDistributions = []
    const currentDate = new Date()
    
    for (let i = 0; i < 12; i++) {
      const distributionDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + i, parseInt(recurringConfig.day))
      
      // Handle month overflow (e.g., Jan 31 -> Feb 28/29)
      if (distributionDate.getMonth() !== (currentDate.getMonth() + i) % 12) {
        distributionDate.setDate(0) // Last day of the previous month
      }
      
      newDistributions.push({
        date: distributionDate.toLocaleDateString('en-US', { 
          month: 'short', 
          day: 'numeric', 
          year: 'numeric' 
        }),
        amount: `$${recurringConfig.amount}`,
        type: recurringConfig.type,
        status: 'Scheduled'
      })
    }
    
    // Add new distributions to the table
    setTableData(prevData => [...prevData, ...newDistributions])
    
    // Show success toast
    setToast({ show: true, message: '12 months of recurring distributions generated successfully!', type: 'success' })
    setTimeout(() => setToast({ show: false, message: '', type: 'success' }), 3000)
    
    // Close the panel
    setShowRecurringPanel(false)
  }

  // Dynamic Payout History Data based on filters
  const getPayoutHistoryData = () => {
    let data = []
    
    // Base data for different filter combinations
    if (selectedFilters.ytd === 'YTD' && selectedFilters.type === 'All' && selectedFilters.status === 'All') {
      data = [600, 650, 700, 750, 800, 850, 900, 950, 1000, 1050, 1100, 1150]
    } else if (selectedFilters.ytd === 'YTD' && selectedFilters.type === 'Cash' && selectedFilters.status === 'All') {
      data = [500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000, 1050]
    } else if (selectedFilters.ytd === 'YTD' && selectedFilters.type === 'Reinvested' && selectedFilters.status === 'All') {
      data = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100]
    } else if (selectedFilters.ytd === 'YTD' && selectedFilters.type === 'All' && selectedFilters.status === 'Paid') {
      data = [400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950]
    } else if (selectedFilters.ytd === 'YTD' && selectedFilters.type === 'All' && selectedFilters.status === 'Scheduled') {
      data = [200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200]
    } else if (selectedFilters.ytd === '12M' && selectedFilters.type === 'All' && selectedFilters.status === 'All') {
      data = [800, 850, 900, 950, 1000, 1050, 1100, 1150, 1200, 1250, 1300, 1350]
    } else if (selectedFilters.ytd === 'All' && selectedFilters.type === 'All' && selectedFilters.status === 'All') {
      data = [400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950]
    } else {
      // Default data
      data = [600, 650, 700, 750, 800, 850, 900, 950, 1000, 1050, 1100, 1150]
    }

    return {
      labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
      datasets: [
        {
          label: 'Payout History',
          data: data,
          borderColor: '#10B981',
          backgroundColor: 'rgba(16, 185, 129, 0.2)',
          fill: true,
          tension: 0.4,
          pointBackgroundColor: '#10B981',
          pointBorderColor: '#ffffff',
          pointBorderWidth: 2,
          pointRadius: 4
        }
      ]
    }
  }

  // Breakdown Data (Pie Chart)
  const breakdownData = {
    labels: ['Cash', 'Reinvested'],
    datasets: [
      {
        data: [75, 25],
        backgroundColor: [
          '#10B981', // Green
          '#3B82F6'  // Blue
        ],
        borderColor: '#ffffff',
        borderWidth: 2,
        hoverOffset: 4
      }
    ]
  }

  // Chart options
  const lineChartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    animation: {
      duration: animateCharts ? 2000 : 0,
      easing: 'easeOutQuart'
    },
    plugins: {
      legend: {
        display: false
      },
      tooltip: {
        backgroundColor: 'rgba(0, 0, 0, 0.8)',
        titleColor: '#ffffff',
        bodyColor: '#ffffff',
        borderColor: '#10B981',
        borderWidth: 1
      }
    },
    scales: {
      y: {
        beginAtZero: true,
        grid: {
          color: 'rgba(0, 0, 0, 0.1)'
        },
        max: Math.max(...getPayoutHistoryData().datasets[0].data) + 100
      },
      x: {
        grid: {
          color: 'rgba(0, 0, 0, 0.1)'
        }
      }
    }
  }

  const pieChartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    animation: {
      duration: animateCharts ? 2000 : 0,
      easing: 'easeOutQuart'
    },
    plugins: {
      legend: {
        position: 'bottom',
        labels: {
          padding: 20,
          usePointStyle: true,
          pointStyle: 'rect'
        }
      },
      tooltip: {
        backgroundColor: 'rgba(0, 0, 0, 0.8)',
        titleColor: '#ffffff',
        bodyColor: '#ffffff',
        callbacks: {
          label: function(context) {
            return context.label + ': ' + context.parsed + '%'
          }
        }
      }
    }
  }

  // Sample data for the table
  const [tableData, setTableData] = useState([
    { date: 'Jan 31, 2025', amount: '$820.25', type: 'Cash', status: 'Paid' },
    { date: 'Feb 28, 2025', amount: '$805.1', type: 'Cash', status: 'Paid' },
    { date: 'Mar 31, 2025', amount: '$840', type: 'Reinvested', status: 'Paid' },
    { date: 'Apr 30, 2025', amount: '$860.75', type: 'Cash', status: 'Paid' },
    { date: 'May 31, 2025', amount: '$910.4', type: 'Cash', status: 'Paid' },
    { date: 'Jun 30, 2025', amount: '$935.1', type: 'Reinvested', status: 'Paid' },
    { date: 'Jul 31, 2025', amount: '$950', type: 'Cash', status: 'Paid' },
    { date: 'Aug 31, 2025', amount: '$975.5', type: 'Cash', status: 'Paid' },
    { date: 'Sep 30, 2025', amount: '$990.25', type: 'Reinvested', status: 'Scheduled' },
    { date: 'Oct 31, 2025', amount: '$1,010', type: 'Cash', status: 'Scheduled' },
    { date: 'Nov 30, 2025', amount: '$1,025.75', type: 'Cash', status: 'Scheduled' },
    { date: 'Dec 31, 2025', amount: '$1,040.5', type: 'Cash', status: 'Scheduled' }
  ])

  return (
    <div className={`min-h-screen transition-all duration-500 ${
      document.documentElement.classList.contains('dark') ? 'bg-gray-900' : 'bg-gray-50'
    }`}>

      {/* Main Content */}
      <div className="flex flex-col lg:flex-row lg:gap-8">
        {/* Main Content Area */}
        <div className="flex-1 p-6">
          {/* Toast Notification */}
          {toast.show && (
            <div className={`mb-4 p-4 rounded-lg transition-all duration-300 ${
              toast.type === 'success' 
                ? 'bg-green-100 border border-green-400 text-green-800' 
                : 'bg-red-100 border border-red-400 text-red-800'
            }`}>
              <div className="flex items-center">
                {toast.type === 'success' ? (
                  <svg className="w-5 h-5 mr-2 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                  </svg>
                ) : (
                  <svg className="w-5 h-5 mr-2 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                )}
                <span className="font-medium">{toast.message}</span>
              </div>
            </div>
          )}
          
          {/* Action Bar */}
          <div className={`mb-8 transition-all duration-700 delay-200 ${
            animateCharts ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'
          }`}>
            <div className="rounded-lg p-4 bg-white border border-gray-200 transition-colors duration-300">
  <div className="flex flex-wrap items-center justify-between gap-4">
    {/* Left side - Filters and Dropdowns */}
    <div className="flex flex-wrap items-center gap-3">
       {/* Filters Button */}
       <button 
         onClick={() => setShowFiltersPanel(!showFiltersPanel)}
         className={`flex items-center px-3 py-2 border border-gray-300 rounded-lg text-gray-800 transition-colors duration-300 ${
           showFiltersPanel ? 'bg-green-500 text-white hover:bg-green-600' : 'bg-gray-100 hover:bg-gray-200'
         }`}
       >
         <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
           <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.207A1 1 0 013 6.5V4z" />
         </svg>
         {showFiltersPanel ? 'Hide Filters' : 'Filters'}
       </button>
       
       {/* Filters Panel */}
       {showFiltersPanel && (
         <div className="absolute top-full left-0 mt-2 w-80 bg-white border border-gray-300 rounded-lg shadow-lg z-50 p-4">
           <div className="space-y-4">
             <h3 className="text-gray-800 font-semibold">Advanced Filters</h3>
             
             {/* Date Range Filter */}
             <div>
               <label className="block text-gray-700 text-sm mb-2">Date Range</label>
               <div className="grid grid-cols-2 gap-2">
                 <input 
                   type="date" 
                   className="px-3 py-2 bg-white border border-gray-300 rounded text-gray-800 text-sm"
                   placeholder="From"
                 />
                 <input 
                   type="date" 
                   className="px-3 py-2 bg-white border border-gray-300 rounded text-gray-800 text-sm"
                   placeholder="To"
                 />
               </div>
             </div>
             
             {/* Amount Range Filter */}
             <div>
               <label className="block text-gray-700 text-sm mb-2">Amount Range</label>
               <div className="grid grid-cols-2 gap-2">
                 <input 
                   type="number" 
                   className="px-3 py-2 bg-white border border-gray-300 rounded text-gray-800 text-sm"
                   placeholder="Min"
                 />
                 <input 
                   type="number" 
                   className="px-3 py-2 bg-white border border-gray-300 rounded text-gray-800 text-sm"
                   placeholder="Max"
                 />
               </div>
             </div>
             
             {/* Apply Filters Button */}
             <button 
               onClick={() => setShowFiltersPanel(false)}
               className="w-full px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition-colors duration-300"
             >
               Apply Filters
             </button>
           </div>
         </div>
       )}

      {/* YTD Dropdown */}
      <div className="relative">
        <button 
          onClick={() => toggleDropdown('ytd')}
          className="flex items-center justify-between px-3 py-2 bg-white border border-gray-300 rounded-lg text-gray-800 hover:bg-gray-100 transition-colors duration-300 min-w-[80px]"
        >
          {selectedFilters.ytd}
          <svg className="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
          </svg>
        </button>
        {openDropdown === 'ytd' && (
          <div className="absolute top-full left-0 mt-1 w-full bg-white border border-gray-300 rounded-lg shadow-lg z-50">
            {['YTD', '12M', 'All'].map((option) => (
              <button
                key={option}
                onClick={() => handleFilterChange('ytd', option)}
                className={`w-full px-3 py-2 text-left hover:bg-gray-100 first:rounded-t-lg last:rounded-b-lg transition-all duration-150 ease-in-out ${
                  selectedFilters.ytd === option ? 'bg-green-500 text-white' : 'text-gray-800 hover:text-green-600'
                }`}
              >
                {option}
              </button>
            ))}
          </div>
        )}
      </div>

      {/* Type Dropdown */}
      <div className="relative">
        <button 
          onClick={() => toggleDropdown('type')}
          className="flex items-center justify-between px-3 py-2 bg-white border border-gray-300 rounded-lg text-gray-800 hover:bg-gray-100 transition-colors duration-300 min-w-[80px]"
        >
          {selectedFilters.type}
          <svg className="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
          </svg>
        </button>
        {openDropdown === 'type' && (
          <div className="absolute top-full left-0 mt-1 w-full bg-white border border-gray-300 rounded-lg shadow-lg z-50">
            {['All', 'Cash', 'Reinvested'].map((option) => (
              <button
                key={option}
                onClick={() => handleFilterChange('type', option)}
                className={`w-full px-3 py-2 text-left hover:bg-gray-100 first:rounded-t-lg last:rounded-b-lg transition-all duration-150 ease-in-out ${
                  selectedFilters.type === option ? 'bg-green-500 text-white' : 'text-gray-800 hover:text-green-600'
                }`}
              >
                {option}
              </button>
            ))}
          </div>
        )}
      </div>

      {/* Status Dropdown */}
      <div className="relative">
        <button 
          onClick={() => toggleDropdown('status')}
          className="flex items-center justify-between px-3 py-2 bg-white border border-gray-300 rounded-lg text-gray-800 hover:bg-gray-100 transition-colors duration-300 min-w-[80px]"
        >
          {selectedFilters.status}
          <svg className="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
          </svg>
        </button>
        {openDropdown === 'status' && (
          <div className="absolute top-full left-0 mt-1 w-full bg-white border border-gray-300 rounded-lg shadow-lg z-50">
            {['All', 'Paid', 'Scheduled'].map((option) => (
              <button
                key={option}
                onClick={() => handleFilterChange('status', option)}
                className={`w-full px-3 py-2 text-left hover:bg-gray-100 first:rounded-t-lg last:rounded-b-lg transition-all duration-150 ease-in-out ${
                  selectedFilters.status === option ? 'bg-green-500 text-white' : 'text-gray-800 hover:text-green-600'
                }`}
              >
                {option}
              </button>
            ))}
          </div>
        )}
      </div>
    </div>

    {/* Center - Search Bar */}
    <div className="flex-1 max-w-md mx-4">
      <div className="relative">
        <svg className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-500 z-10" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <circle cx="11" cy="11" r="8" strokeWidth="2"/>
          <path d="m21 21-4.35-4.35" strokeWidth="2"/>
        </svg>
        <input
          type="text"
          placeholder="Search date, type, status, a..."
          className="w-full pl-10 pr-4 py-2 bg-white border border-gray-300 rounded-lg text-gray-800 placeholder-gray-400 focus:border-green-500 focus:ring-2 focus:ring-green-200 transition-all duration-200 ease-in-out"
        />
      </div>
    </div>

    {/* Right side - Action Buttons */}
    <div className="flex items-center gap-3">
      {/* CSV Button */}
      <button 
        onClick={handleCSVExport}
        className="flex items-center px-3 py-2 bg-transparent border border-gray-300 rounded-lg text-gray-800 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-300"
      >
        <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
        </svg>
        CSV
      </button>

      {/* ICS Button */}
      <button 
        onClick={handleICSExport}
        className="flex items-center px-3 py-2 bg-transparent border border-gray-300 rounded-lg text-gray-800 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-300"
      >
        <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
        </svg>
        ICS
      </button>

      {/* Recurring Button */}
      <button 
        onClick={handleRecurringSetup}
        className="flex items-center px-3 py-2 bg-transparent border border-gray-300 rounded-lg text-gray-800 hover:bg-gray-100 hover:text-gray-900 transition-colors duration-300"
      >
        <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
        </svg>
        Recurring
      </button>

      {/* Undo/Redo Buttons */}
      <div className="flex gap-1">
        <button 
          onClick={handleUndo}
          disabled={historyIndex <= 0}
          className={`p-2 border border-gray-300 rounded-lg transition-colors duration-300 ${
            historyIndex <= 0 
              ? 'bg-gray-100 text-gray-400 cursor-not-allowed' 
              : 'bg-white text-gray-800 hover:bg-gray-100'
          }`}
        >
          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
          </svg>
        </button>
        <button 
          onClick={handleRedo}
          disabled={historyIndex >= tableHistory.length - 1}
          className={`p-2 border border-gray-300 rounded-lg transition-colors duration-300 ${
            historyIndex >= tableHistory.length - 1 
              ? 'bg-gray-100 text-gray-400 cursor-not-allowed' 
              : 'bg-white text-gray-800 hover:bg-gray-100'
          }`}
        >
          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14 5l7 7m0 0l-7 7m7-7H3" />
          </svg>
        </button>
      </div>
    </div>
  </div>
</div>

          </div>

          {/* Recurring Setup Panel */}
          {showRecurringPanel && (
            <div className="mb-6 bg-gray-800 rounded-lg p-4 border border-gray-600">
              <div className="flex flex-wrap items-center gap-4">
                {/* Frequency */}
                <div className="flex items-center gap-2">
                  <label className="text-white text-sm font-medium">Freq</label>
                  <select 
                    value={recurringConfig.frequency} 
                    onChange={(e) => setRecurringConfig(prev => ({ ...prev, frequency: e.target.value }))}
                    className="px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white text-sm focus:border-green-500 focus:ring-1 focus:ring-green-500"
                  >
                    <option value="Monthly">Monthly</option>
                    <option value="Quarterly">Quarterly</option>
                    <option value="Yearly">Yearly</option>
                  </select>
                </div>

                {/* Day */}
                <div className="flex items-center gap-2">
                  <label className="text-white text-sm font-medium">Day</label>
                  <input 
                    type="number" 
                    value={recurringConfig.day} 
                    onChange={(e) => setRecurringConfig(prev => ({ ...prev, day: e.target.value }))}
                    className="w-20 px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white text-sm focus:border-green-500 focus:ring-1 focus:ring-green-500"
                    min="1"
                    max="31"
                  />
                </div>

                {/* Type */}
                <div className="flex items-center gap-2">
                  <label className="text-white text-sm font-medium">Type</label>
                  <select 
                    value={recurringConfig.type} 
                    onChange={(e) => setRecurringConfig(prev => ({ ...prev, type: e.target.value }))}
                    className="px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white text-sm focus:border-green-500 focus:ring-1 focus:ring-green-500"
                  >
                    <option value="Cash">Cash</option>
                    <option value="Reinvested">Reinvested</option>
                  </select>
                </div>

                {/* Amount */}
                <div className="flex items-center gap-2">
                  <label className="text-white text-sm font-medium">Amount</label>
                  <input 
                    type="number" 
                    value={recurringConfig.amount} 
                    onChange={(e) => setRecurringConfig(prev => ({ ...prev, amount: e.target.value }))}
                    className="w-24 px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white text-sm focus:border-green-500 focus:ring-1 focus:ring-green-500"
                  />
                </div>

                {/* Generate Button */}
                <button 
                  onClick={handleGenerate12Months}
                  className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors duration-300 font-medium"
                >
                  Generate 12 mo
                </button>

                {/* Close Button */}
                <button 
                  onClick={() => setShowRecurringPanel(false)}
                  className="px-3 py-2 text-gray-400 hover:text-white transition-colors duration-300"
                >
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
          )}

          {/* Metric Cards */}
          <div className={`grid grid-cols-1 mt-34 sm:grid-cols-2 lg:grid-cols-3 gap-4 lg:gap-6 mb-6 transition-all duration-700 delay-400 ${
            animateCharts ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'
          }`}>
                         <div className="bg-white rounded-xl shadow-lg p-4 lg:p-6 text-center relative overflow-hidden">
               {/* Light greenish left border/shade */}
               <div className="absolute left-0 top-0 bottom-0 w-1 bg-gradient-to-b from-green-200 to-green-300"></div>
               <div className="flex items-center justify-center mb-2">
                 <svg className="w-6 h-6 lg:w-8 lg:h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                   <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
                 </svg>
               </div>
               <h3 className="text-sm lg:text-lg font-semibold text-gray-600 mb-2">YTD Distributions</h3>
               <p className="text-xl lg:text-3xl font-bold text-green-600">$11,163.6</p>
             </div>
            
                         <div className="bg-white rounded-xl shadow-lg p-4 lg:p-6 text-center relative overflow-hidden">
               <div className="absolute left-0 top-0 bottom-0 w-1 bg-gradient-to-b from-green-200 to-green-300"></div>
               <div className="flex items-center justify-center mb-2">
                 <svg className="w-6 h-6 lg:w-8 lg:h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                   <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                 </svg>
               </div>
               <h3 className="text-sm lg:text-lg font-semibold text-gray-600 mb-2">Paid (filtered)</h3>
               <p className="text-xl lg:text-3xl font-bold text-green-600">$7,097.1</p>
             </div>
            
                         <div className="bg-white rounded-xl shadow-lg p-4 lg:p-6 text-center relative overflow-hidden">
               <div className="absolute left-0 top-0 bottom-0 w-1 bg-gradient-to-b from-green-200 to-green-300"></div>
               <div className="flex items-center justify-center mb-2">
                 <svg className="w-6 h-6 lg:w-8 lg:h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                   <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                 </svg>
               </div>
               <h3 className="text-sm lg:text-lg font-semibold text-gray-600 mb-2">Scheduled (filtered)</h3>
               <p className="text-xl lg:text-3xl font-bold text-green-600">$4,066.5</p>
             </div>
          </div>

                     {/* Time Period Selection */}
           <div className={`flex flex-col sm:flex-row sm:justify-end gap-2 sm:gap-4 mb-6 transition-all duration-700 delay-600 ${
             animateCharts ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'
           }`}>
                         <button 
               onClick={() => handlePeriodChange('quarterly')}
               className={`px-4 lg:px-6 py-2 rounded-lg text-sm lg:text-base font-semibold transition-all duration-300 hover:shadow-lg transform hover:scale-105 hover:-translate-y-1 ${
                 selectedPeriod === 'quarterly' ? 'bg-green-600 text-white hover:bg-green-700 hover:shadow-green-400/50' : 'bg-white text-gray-700 border border-gray-300 hover:bg-green-50 hover:border-green-400 hover:shadow-green-200/50'
               }`}
             >
               Quarterly
             </button>
             <button 
               onClick={() => handlePeriodChange('yearly')}
               className={`px-4 lg:px-6 py-2 rounded-lg text-sm lg:text-base font-semibold transition-all duration-300 hover:shadow-lg transform hover:scale-105 hover:-translate-y-1 ${
                 selectedPeriod === 'yearly' ? 'bg-green-600 text-white hover:bg-green-700 hover:shadow-green-400/50' : 'bg-white text-gray-700 border border-gray-300 hover:bg-green-50 hover:border-green-400 hover:shadow-green-200/50'
               }`}
             >
               Yearly
             </button>
          </div>

                     {/* Payout History Chart */}
           <div className={`bg-white rounded-xl shadow-lg p-4 lg:p-6 mb-6 transition-all duration-1000 delay-800 ${
             animateCharts ? 'opacity-100 scale-100' : 'opacity-0 scale-95'
           }`}>
             <h2 className="text-lg lg:text-xl font-semibold text-gray-800 mb-4">Payout History</h2>
             <div className="h-48 lg:h-64">
              <Line 
                key={`${selectedFilters.ytd}-${selectedFilters.type}-${selectedFilters.status}`}
                data={getPayoutHistoryData()} 
                options={lineChartOptions} 
              />
            </div>
          </div>

                     {/* Data Table */}
           <div className={`bg-white rounded-xl shadow-lg overflow-hidden transition-all duration-1000 delay-1000 ${
             animateCharts ? 'opacity-100 scale-100' : 'opacity-0 scale-95'
           }`}>
             <div className="overflow-x-auto">
               <table className="w-full min-w-[800px]">
                                 <thead className="bg-gray-50 border-b border-gray-200">
                   <tr>
                     <th className="px-3 lg:px-6 py-3 lg:py-4 text-left">
                       <input type="checkbox" className="rounded border-gray-300 text-green-600 focus:ring-green-500" />
                     </th>
                     <th className="px-3 lg:px-6 py-3 lg:py-4 text-left text-xs lg:text-sm font-semibold text-gray-700">Date</th>
                     <th className="px-3 lg:px-6 py-3 lg:py-4 text-left text-xs lg:text-sm font-semibold text-gray-700">Amount</th>
                     <th className="px-3 lg:px-6 py-3 lg:py-4 text-left text-xs lg:text-sm font-semibold text-gray-700">Type</th>
                     <th className="px-3 lg:px-6 py-3 lg:py-4 text-left text-xs lg:text-sm font-semibold text-gray-700">Status</th>
                     <th className="px-3 lg:px-6 py-3 lg:py-4 text-left text-xs lg:text-sm font-semibold text-gray-700">Actions</th>
                   </tr>
                 </thead>
                <tbody className="divide-y divide-gray-200">
                                     {tableData.map((row, index) => (
                     <tr key={index} className="hover:bg-gray-50">
                       <td className="px-3 lg:px-6 py-3 lg:py-4">
                         <input type="checkbox" className="rounded border-gray-300 text-green-600 focus:ring-green-500" />
                       </td>
                       <td className="px-3 lg:px-6 py-3 lg:py-4 text-xs lg:text-sm text-gray-900">{row.date}</td>
                       <td className="px-3 lg:px-6 py-3 lg:py-4 text-xs lg:text-sm text-gray-900">{row.amount}</td>
                                             <td className="px-3 lg:px-6 py-3 lg:py-4">
                         <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                           row.type === 'Cash' 
                             ? 'bg-green-100 text-green-800' 
                             : 'bg-blue-100 text-blue-800'
                         }`}>
                           {row.type}
                         </span>
                       </td>
                       <td className="px-3 lg:px-6 py-3 lg:py-4">
                                                 <div className="flex items-center">
                           {row.status === 'Paid' ? (
                             <>
                               <svg className="w-3 h-3 lg:w-4 lg:h-4 text-green-600 mr-1 lg:mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                 <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                               </svg>
                               <span className="text-xs lg:text-sm text-green-600">Paid</span>
                             </>
                           ) : (
                             <>
                               <svg className="w-3 h-3 lg:w-4 lg:h-4 text-orange-600 mr-1 lg:mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                 <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                               </svg>
                               <span className="text-xs lg:text-sm text-orange-600">Scheduled</span>
                             </>
                           )}
                         </div>
                       </td>
                       <td className="px-3 lg:px-6 py-3 lg:py-4">
                          <div className="flex flex-wrap gap-1 lg:gap-2">
                            <button 
                              onClick={() => handleDownloadStatement(row)}
                              className="flex items-center px-2 lg:px-3 py-1 bg-white border border-gray-300 rounded text-xs text-gray-700 hover:bg-blue-50 hover:border-blue-400 hover:shadow-md transition-all duration-200 ease-in-out transform hover:scale-105"
                            >
                              <svg className="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                              </svg>
                              Statement
                            </button>
                            {row.status === 'Scheduled' && (
                              <button 
                                onClick={() => handleMarkAsPaid(index)}
                                className="flex items-center px-2 lg:px-3 py-1 bg-white border border-gray-300 rounded text-xs text-gray-700 hover:bg-green-50 hover:border-green-400 hover:shadow-md transition-all duration-200 ease-in-out transform hover:scale-105"
                              >
                                <svg className="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                </svg>
                                Mark Paid
                              </button>
                            )}
                          </div>
                        </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            
                         {/* Pagination */}
             <div className="px-4 lg:px-6 py-3 lg:py-4 bg-gray-50 border-t border-gray-200">
               <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2 sm:gap-0">
                 <span className="text-xs lg:text-sm text-gray-700">Page 2 / 2 • 12 results</span>
                 <div className="flex gap-2">
                  <button className="p-2 bg-white border border-gray-300 rounded text-gray-700 hover:bg-gray-50 hover:border-gray-400 hover:shadow-md transition-all duration-200 ease-in-out transform hover:scale-105">
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                    </svg>
                  </button>
                  <button className="p-2 bg-white border border-gray-300 rounded text-gray-700 hover:bg-gray-50 hover:border-gray-400 hover:shadow-md transition-all duration-200 ease-in-out transform hover:scale-105">
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                    </svg>
                  </button>
                </div>
              </div>
            </div>
          </div>

                     {/* Bottom Widget Cards */}
           <div className={`grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 lg:gap-6 mt-6 transition-all duration-1000 delay-1200 ${
             animateCharts ? 'opacity-100 scale-100' : 'opacity-0 scale-95'
           }`}>
                         {/* Breakdown Card */}
             <div className="bg-white rounded-xl shadow-lg p-4 lg:p-6">
               <div className="flex items-center justify-between mb-4">
                 <h3 className="text-base lg:text-lg font-semibold text-gray-800">Breakdown (filtered)</h3>
               </div>
               <div className="h-24 lg:h-32 mb-4">
                <Pie data={breakdownData} options={pieChartOptions} />
              </div>
                             <div className="text-center">
                 <span className="text-xs lg:text-sm text-gray-600">Cash - 75%</span>
               </div>
             </div>

             {/* Bank Instructions Card */}
             <div className="bg-white rounded-xl shadow-lg p-4 lg:p-6">
               <h3 className="text-base lg:text-lg font-semibold text-black mb-4">Bank Instructions</h3>
               <div className="space-y-2 lg:space-y-3">
                 <div className="flex items-center gap-2">
                   <span className="text-xs lg:text-sm text-gray-400">Bank:</span>
                   <span className="text-xs lg:text-sm font-medium text-black ml-auto">First Federal</span>
                 </div>
                 <div className="flex items-center gap-2">
                   <span className="text-xs lg:text-sm text-gray-400">Account:</span>
                   <span className="text-xs lg:text-sm font-medium text-black ml-auto">**** 4821</span>
                 </div>
                 <div className="flex items-center gap-2">
                   <span className="text-xs lg:text-sm text-gray-400">Routing:</span>
                   <span className="text-xs lg:text-sm font-medium text-black ml-auto">*****123</span>
                 </div>
               </div>
               <div className="flex gap-2 mt-4">
                 <button
                   className="px-3 py-1.5 text-xs lg:text-sm rounded border border-gray-500 text-gray-200 bg-transparent hover:bg-gray-700 hover:border-gray-400 transition-all duration-150"
                 >
                   Request change
                 </button>
                 <button
                   className="px-3 py-1.5 text-xs lg:text-sm rounded border border-gray-500 text-gray-200 bg-transparent hover:bg-gray-700 hover:border-gray-400 transition-all duration-150"
                 >
                   Download
                 </button>
               </div>
             </div>

                         {/* Download Center Card */}
             <div className="bg-white rounded-xl shadow-lg p-4 lg:p-6">
               <div className="flex items-center justify-between mb-4">
                 <h3 className="text-base lg:text-lg font-semibold text-gray-800">Download Center</h3>
                 <button className="text-xs lg:text-sm text-white hover:text-gray-700 transition-all duration-200 ease-in-out hover:scale-105 hover:font-medium">Clear</button>
               </div>
               <div className="text-center py-6 lg:py-8">
                 <p className="text-xs lg:text-sm text-gray-500">No files yet. Use CSV/ICS/Statement.</p>
               </div>
             </div>
          </div>
        </div>

        {/* Right: Sidebar */}
<div className="w-full lg:w-1/3 xl:w-1/4 min-w-0 max-w-full p-6 lg:pl-0 lg:pr-6">
  <RightSidebar animateCharts={animateCharts} />
</div>      </div>
    </div>
  )
}

export default Distributions
